#!/usr/bin/python
# -*- coding: utf-8 -*-

import logging
logger = logging.getLogger(__name__)

import os
import subprocess
from simg.devadapter import BaseDeviceAdapter, DeviceAdapterError, DeviceEndType
from simg.devadapter.logsubject import SerialLogSubject
from simg.devadapter.wired.base import Mhl3Interface, MscMessage


class TitanDeviceAdapter(BaseDeviceAdapter, Mhl3Interface):
    DEVPATH = "/sys/class/mhl/sii-8620"

    def __init__(self, comport=None, adb=True, **kwargs):
        super(TitanDeviceAdapter, self).__init__(**kwargs)
        self.__comport = comport
        self.__adb = adb
        if self.__comport is not None:
            self.log_subject = SerialLogSubject(comport, 115200)

    @property
    def end_type(self):
        return DeviceEndType.SOURCE

    def open(self):
        os.system("adb start-server")
        if self.__comport is not None:
            self.log_subject.open()

    def close(self):
        if self.__comport is not None:
            self.log_subject.close()
        #os.system("adb kill-server")

    def send_rap(self, code):
        cmd = "echo %d > %s/rap/out" % (code, self.DEVPATH)
        self.run(cmd)

    def send_rcp(self, code):
        cmd = "echo %d > %s/rcp/out" % (code, self.DEVPATH)
        return self.run(cmd)

    def send_ucp(self, code):
        cmd = "echo %d > %s/ucp/out" % (code, self.DEVPATH)
        return self.run(cmd)

    def send_rbp(self, code):
        cmd = "echo %d > %s/rbp/out" % (code, self.DEVPATH)
        return self.run(cmd)

    def run(self, cmd):
        if self.__adb:
            cmd = 'adb shell "%s"' % cmd
        logger.debug("run: cmd=%s", cmd)
        proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)
        stdout = proc.communicate()[0]
        logger.debug("run: retcode=%s, output=\n%s", proc.returncode, stdout)
        if proc.returncode != 0:
            raise DeviceAdapterError("command '%s' error" % cmd)
        return proc.returncode, stdout

    def read_byte(self, page, offset):
        return self.read_block(page, offset, 1)[0]

    def read_block(self, page, offset, length):
        self.run("echo %d > %s/reg_access/page" % (page, self.DEVPATH))
        self.run("echo %d > %s/reg_access/offset" % (offset, self.DEVPATH))
        self.run("echo %d > %s/reg_access/length" % (length, self.DEVPATH))
        retcode, data = self.run("cat %s/reg_access/data" % self.DEVPATH)
        actual_key, value = data.split(":")
        expect_key = "0x%02x'0x%02x" % (page, offset)
        if actual_key != expect_key:
            raise DeviceAdapterError("%s != %s" % (actual_key, expect_key))
        return [int(s, 16) for s in value.strip().split(" ")]

    def write_byte(self, page, offset, data):
        raise NotImplementedError

    def get_edid(self):
        cmd = "cat %s/edid" % self.DEVPATH
        return self.run(cmd)[1]

    def send_msc_message(self, message):
        logger.debug("%s send msc message: %s", self, message)
        self.write_byte(0xC8, 0xB9, 0x68)
        self.write_byte(0xC8, 0xBA, message.type)
        self.write_byte(0xC8, 0xBB, message.code)
        self.write_byte(0xC8, 0XB8, 0x02)

    def recv_msc_message(self):
        type = self.read_byte(0xC8, 0xBF)
        code = self.read_byte(0xC8, 0xC0)
        message = MscMessage(type, code)
        logger.debug("%s recv msc message: %s", self, message)
        return message

    def get_local_devcap(self):
        devcap = []
        for index in range(16):
            set_offset_cmd = "echo %s > %s/devcap/local_offset" % (index, self.DEVPATH)
            self.run(set_offset_cmd)

            get_devcap_cmd = "cat %s/devcap/local" % self.DEVPATH
            value = self.run(get_devcap_cmd)[1]
            devcap.append(int(value, 16))
        logger.debug("%s's local devcap: %s", self, devcap)
        return devcap

    def get_remote_devcap(self):
        devcap = []
        for index in range(16):
            set_offset_cmd = "echo %s > %s/devcap/remote_offset" % (index, self.DEVPATH)
            self.run(set_offset_cmd)

            get_devcap_cmd = "cat %s/devcap/remote" % self.DEVPATH
            value = self.run(get_devcap_cmd)[1]
            devcap.append(int(value, 16))
        logger.debug("%s's remote devcap: %s", self, devcap)
        return devcap

    def get_local_x_devcap(self):
        # page 4: 0x80-0x83
        # return: 0xba'0x80: 0x03 0x07 0x09 0x01
        return self.read_block(0xBA, 0x80, 4)

    def get_remote_x_devcap(self):
        raise NotImplementedError

    def ___str__(self):
        return "<TitanDeviceAdapter(comport:%s)>" % self.__comport

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)-15s - %(thread)-5d [%(levelname)-8s] - %(message)s',
    )

    titan = TitanDeviceAdapter()
    titan.open()
    try:
        titan.recv_msc_message()
        titan.send_rap(0xFF)
        print titan.recv_msc_message()
    finally:
        titan.close()