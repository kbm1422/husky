#!/usr/bin/python
# -*- coding: utf-8 -*-

import logging
logger = logging.getLogger(__name__)

from qd import QD882

import re
import socket
import telnetlib


class Type(object):
    QD882 = "QD882"
    ASTRO870 = "ASTRO870"
    BDP = "BDP"
    MOBILE = "MOBILE"
    VIDEOCARD = "VIDEOCARD"


class AVProducerFactory(object):
    @classmethod
    def new_avproducer(cls, **kwargs):
        avp_type = kwargs.pop("type").upper()
        if avp_type == Type.QD882:
            return QD882(**kwargs)
        elif avp_type == Type.ASTRO870:
            return ASTRO870(**kwargs)
        elif avp_type == Type.BDP:
            return BDP(**kwargs)
        elif avp_type == Type.MOBILE:
            return Mobile(**kwargs)
        elif avp_type == Type.VIDEOCARD:
            return VideoCard(**kwargs)
        else:
            BaseAVProducer(**kwargs)


class BaseAVProducer(object):
    def __init__(self, name):
        self.name = name

    def close(self):
        pass


class BDP(BaseAVProducer):
    pass


class ASTRO870(BaseAVProducer):
    pass


class Mobile(BaseAVProducer):
    pass


class VideoCard(BaseAVProducer):
    def __init__(self, host, port=22):
        super(VideoCard, self).__init__(name="GTX")
        """Initialise the communication with VideoCard, given its IP address"""
        self.host = host
        self.inited = False
        if not self.host.strip():
            raise ValueError("Supplied IP address is blank")

        # Trim any leading zeros in the IP. Eg: Convert 010.005.060.208 to 10.5.60.208
        k = dict()
        b = re.match(r"(.*)\.(.*)\.(.*)\.(.*)", self.host)
        for i in range(1, 5):
            k[i] = b.group(i).lstrip('0')
            if not k[i]:
                k[i] = '0'
        self.host = k[1]+"."+k[2]+"."+k[3]+"."+k[4]
        logger.debug("The IP address of the VideoCard is "+self.host)
        self.tn = telnetlib.Telnet()
        try:
            self.tn.open(self.host, port)
        except socket.error:
            logger.exception("ERROR: Unable to open a telnet connection with %s", self.host)
            raise

        self.inited = True