#!/usr/bin/python
# -*- coding: utf-8 -*-

import logging
logger = logging.getLogger(__name__)

from simg.test.framework import TestResource
from simg.util.sl8800 import SL8800
from simg.util.uts800 import UTS800
from simg.util.avproducer import AVProducerFactory
from simg.util.avconsumer import AVConsumerFactory
from simg.util.webcam import WebCamFactory
from simg.util.powerswitch import PSOutlet
from simg.devadapter.wired import DeviceAdapterFactory


class Devices(object):
    def __init__(self):
        self.transmitter = None
        self.repeater = None
        self.receiver = None


class TestBench(TestResource):
    def __init__(self, conf):
        self.conf = conf
        self.name = self.conf.get("name")

        self.device = None
        self.devices = Devices()
        self.avproducer = None
        self.avconsumer = None
        self.sl8800 = None
        self.webcam = None
        self.uts800 = None

    def initinalize(self):
        device_element = self.conf.find("Device")
        if device_element is not None:
            self.device = DeviceAdapterFactory.new_device_adapter(**device_element.attrib)
            dev_psoutlet_element = device_element.find("PSOutlet", None)
            if dev_psoutlet_element is not None:
                self.device.psoutlet = PSOutlet(**dev_psoutlet_element.attrib)

        devices_element = self.conf.find("Devices")
        if devices_element is not None:
            transmitter_element = devices_element.find("Transmitter")
            if transmitter_element is not None:
                self.devices.transmitter = DeviceAdapterFactory.new_device_adapter(**transmitter_element.attrib)
                transmitter_psoutlet_element = transmitter_element.find("PSOutlet")
                if transmitter_psoutlet_element is not None:
                    self.devices.transmitter.psoutlet = PSOutlet(**transmitter_psoutlet_element.attrib)

            repeater_element = devices_element.find("Repeater")
            if repeater_element is not None:
                self.devices.repeater = DeviceAdapterFactory.new_device_adapter(**repeater_element.attrib)
                repeater_psoutlet_element = repeater_element.find("PSOutlet")
                if repeater_psoutlet_element is not None:
                    self.devices.repeater.psoutlet = PSOutlet(**repeater_psoutlet_element.attrib)

            receiver_element = devices_element.find("Receiver")
            if receiver_element is not None:
                self.devices.receiver = DeviceAdapterFactory.new_device_adapter(**receiver_element.attrib)
                receiver_psoutlet_element = receiver_element.find("PSOutlet")
                if receiver_psoutlet_element is not None:
                    self.devices.receiver.psoutlet = PSOutlet(**receiver_psoutlet_element.attrib)
        else:
            raise ValueError("Devices element can't be None")

        avp_element = self.conf.find("AVProducer", None)
        if avp_element is not None:
            self.avproducer = AVProducerFactory.new_avproducer(**avp_element.attrib)
            avp_psoutlet_element = avp_element.find("PSOutlet", None)
            if avp_psoutlet_element is not None:
                self.avproducer.psoutlet = PSOutlet(**avp_psoutlet_element.attrib)

        avc_element = self.conf.find("AVConsumer", None)
        if avc_element is not None:
            self.avconsumer = AVConsumerFactory.new_avconsumer(**avc_element.attrib)
            avc_psoutlet_element = avc_element.find("PSOutlet", None)
            if avc_psoutlet_element is not None:
                self.avconsumer.psoutlet = PSOutlet(**avc_psoutlet_element.attrib)

        sl8800_element = self.conf.find("SL8800")
        if sl8800_element is not None:
            self.sl8800 = SL8800(**sl8800_element.attrib)

        uts800_element = self.conf.find("UTS800")
        if uts800_element is not None:
            self.uts800 = UTS800.new_mhl(**uts800_element.attrib)

        webcam_element = self.conf.find("WebCam")
        webcam_kwargs = webcam_element.attrib if webcam_element is not None else {}
        self.webcam = WebCamFactory.new_webcam(**webcam_kwargs)

    def finalize(self):
        self.device = None
        self.devices = None
        self.avproducer = None
        self.avconsumer = None
        self.sl8800 = None
        self.webcam = None
        self.uts800 = None

    def on_runner_start(self):
        self.initinalize()
        if self.device is not None:
            self.device.open()

        for device in self.devices.__dict__.values():
            if device is not None:
                device.open()

    def on_runner_stop(self):
        if self.device is not None:
            self.device.close()

        for device in self.devices.__dict__.values():
            if device is not None:
                device.close()

        if self.avproducer is not None:
            self.avproducer.close()

        self.finalize()

    def __repr__(self):
        return "<TestBench '%s'>" % self.name

    def __str__(self):
        return self.__repr__()