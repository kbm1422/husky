#!/usr/bin/python
# -*- coding: utf-8 -*-

import logging
logger = logging.getLogger(__name__)

import os
import time
import argparse
import logging.config
from xml.etree import ElementTree

import common

from simg import fs
from simg.test.framework import TestRunner
from simg.test.framework import TestDefinitionXMLLoader


from bench import TestBenchConfiguration


class TestDescriptionConfiguration(object):
    def __init__(self, despxml):
        self.etree = ElementTree.parse(despxml)

    @staticmethod
    def parse_suites_element(element):
        return TestDefinitionXMLLoader(element).to_suite_dicts()

    @staticmethod
    def parse_context_element(element):
        context = element.attrib
        actions = []
        for action_element in list(element):
            attrib = action_element.attrib
            actions.append(attrib)
        context["actions"] = actions
        return context

    def parse_report_element_to_dict(self):
        from simg.util import sstring

        element = self.etree.find("MailReport")
        sendout = sstring.get_boolean(element.get("sendout", True))
        subject = self.etree.findtext("Summary")
        server = element.get("smtpserver", default="172.25.0.3")
        attempt = int(element.get("attempt", default="3"))
        sender = element.get("sender", default="sqagroup@siliconimage.com")
        receivers = element.get("receivers")

        return {"sendout": sendout,
                "subject": subject,
                "server": server,
                "attempt": attempt,
                "sender": sender,
                "receivers": receivers}


class NativeTestConsole(object):
    def __init__(self, rsrccfg, despcfg, basedir, failfast=False):
        self._rsrccfg = rsrccfg
        self._despcfg = despcfg
        self._basedir = basedir
        self._failfast = failfast
        self._mail_kwargs = self._despcfg.parse_report_element_to_dict()

    def __build_all_runners(self):
        runners = []
        for runner_element in self._despcfg.etree.findall("TestRunner"):
            kwargs = runner_element.attrib

            context_element = runner_element.find("TestContext")
            kwargs["context"] = self._despcfg.parse_context_element(context_element) if context_element is not None else {}

            suite_dicts = self._despcfg.parse_suites_element(runner_element.find("TestSuites"))
            runner = self._build_runner(kwargs, suite_dicts)
            runners.append(runner)
        return runners

    def _build_runner(self, kwargs, suite_dicts):
        runner = TestRunner(**kwargs)
        if "logdir" not in kwargs["context"]:
            runner.context.logdir = os.path.join(self._basedir, runner.name)
        runner.context.resource = self._rsrccfg.buildTestBenchByName(runner.context.rsrcname)

        for suite_dict in suite_dicts:
            runner.add_suite(suite_dict)
        return runner

    def _handle_stopped_runner(self, runner):
        try:
            common.report(runner, self._mail_kwargs)
        except:
            logger.exception("")

    def run(self):
        runners = self.__build_all_runners()
        for runner in runners:
            runner.start()

        try:
            while runners:
                alive_runners = []
                for runner in runners:
                    runner.join(1.0)
                    if runner.is_alive():
                        alive_runners.append(runner)
                    else:
                        self._handle_stopped_runner(runner)
                runners = alive_runners
        except KeyboardInterrupt:
            logger.warn("KeyboardInterrupt. All runners will be stopped after current running test case finished.")
            for runner in runners:
                runner.abort()
                runner.join()
                self._handle_stopped_runner(runner)


def main():
    parser = argparse.ArgumentParser(add_help=True)
    subparsers = parser.add_subparsers(dest="mode")

    parser.add_argument('--failfast', action='store_true', dest="failfast", default=False)
    parser.add_argument('--despxml', action='store', dest="despxml", type=file, default="TestDescription.xml")
    native_parser = subparsers.add_parser("native")
    args = parser.parse_args()

    despcfg = TestDescriptionConfiguration(args.despxml)
    if args.mode == "native":
        basedir = os.path.join(common.logdir, time.strftime("%Y-%m-%d_%H-%M-%S"))
        fs.mkpath(basedir)
        logconf = {
            'version': 1,
            'disable_existing_loggers': False,
            'formatters': {
                'verbose': {
                    'format': '%(asctime)-15s - %(thread)-5d [%(levelname)-8s] - %(message)s'
                },
            },
            'handlers': {
                'console': {
                    'class': 'logging.StreamHandler',
                    'level': 'DEBUG',
                    'formatter': 'verbose'
                },
                'file_debug': {
                    'class': 'logging.handlers.RotatingFileHandler',
                    'level': 'DEBUG',
                    'formatter': 'verbose',
                    'filename': os.path.join(basedir, "debug.log"),
                    'maxBytes': 50000000,
                    'backupCount': 10
                },
            },
            'root': {
                'level': 'DEBUG',
                'handlers': ['console', 'file_debug'],
            }
        }
        logging.config.dictConfig(logconf)
        rsrccfg = TestBenchConfiguration(common.resconf)
        console = NativeTestConsole(rsrccfg, despcfg, basedir)
        console.run()
    else:
        raise ValueError

if __name__ == "__main__":
    main()