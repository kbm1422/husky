#!/usr/bin/python
# -*- coding: utf-8 -*-

import logging
logger = logging.getLogger(__name__)

from collections import namedtuple
from ctypes import *
from abc import ABCMeta, abstractmethod

from simg.devadapter import BaseDeviceAdapter
from simg.devadapter.logsubject import SerialLogSubject
import blackbox

MscMessage = namedtuple("MscMessage", ["type", "code"])


class Mhl2Interface(object):
    __metaclass__ = ABCMeta

    @abstractmethod
    def get_local_devcap(self):
        pass

    @abstractmethod
    def get_remote_devcap(self):
        pass

    @abstractmethod
    def send_msc_message(self, message):
        pass

    @abstractmethod
    def recv_msc_message(self):
        pass

    def send_rap(self, code):
        logger.info("send rap command: 0x%02X", code)
        self.send_msc_message(MscMessage(0x20, code))

    def send_rcp(self, code):
        logger.info("send rcp command: 0x%02X", code)
        self.send_msc_message(MscMessage(0x10, code))

    def send_ucp(self, code):
        logger.info("send ucp command: 0x%02X", code)
        self.send_msc_message(MscMessage(0x30, code))


class Mhl3Interface(Mhl2Interface):
    __metaclass__ = ABCMeta

    @abstractmethod
    def get_local_x_devcap(self):
        pass

    @abstractmethod
    def get_remote_x_devcap(self):
        pass

    def send_rbp(self, code):
        logger.info("send rbp command: 0x%02X", code)
        self.send_msc_message(MscMessage(0x22, code))


class BaseBlackBoxDeviceAdapter(BaseDeviceAdapter):
    __metaclass__ = ABCMeta

    def __init__(self, devport, comport, baudrate, **kwargs):
        super(BaseBlackBoxDeviceAdapter, self).__init__(**kwargs)
        self._comport = comport
        self._devport = devport
        self._bb_index = int(devport)
        self._bb_handle = blackbox.BB_HANDLE()
        self.log_subject = SerialLogSubject(comport, baudrate)

    def _set_ic2_options(self):
        i2c_options = blackbox.I2C_OPTIONS()
        i2c_options.readTimeout = 100
        i2c_options.writeTimeout = 100
        i2c_options.repeatedStart = 1
        i2c_options.isBigEndian = 1
        i2c_options.noIncAddr = 1
        i2c_options.i2cBusMode = blackbox.I2C_MODE_STD
        i2c_options.i2cTimeout = 127
        i2c_options.busGrantEnabled = 1
        blackbox.I2C_SetOptions(self._bb_handle, i2c_options)

    def _set_gpio_pins(self):
        gpio_options = blackbox.GPIO_OPTIONS()
        gpio_options.readTimeout = 100
        gpio_options.writeTimeout = 100
        gpio_options.gpioCfg0 = blackbox.GPIO_PUSH_PULL
        gpio_options.gpioCfg1 = blackbox.GPIO_PUSH_PULL
        gpio_options.gpioCfg2 = blackbox.GPIO_PUSH_PULL
        gpio_options.gpioCfg3 = blackbox.GPIO_INPUT
        gpio_options.gpioCfg4 = blackbox.GPIO_PUSH_PULL
        gpio_options.gpioCfg5 = blackbox.GPIO_INPUT
        gpio_options.gpioCfg6 = blackbox.GPIO_INPUT
        gpio_options.gpioCfg7 = blackbox.GPIO_INPUT
        gpio_options.gpioRequest = 4
        gpio_options.gpioGrant = 3
        gpio_options.gpioRequestActiveLow = 1
        gpio_options.gpioGrantActiveLow = 1
        blackbox.GPIO_SetPins(self._bb_handle, gpio_options)

    def open(self):
        self.log_subject.open()
        blackbox.BlackBox_Open(self._bb_index, byref(self._bb_handle))
        self._set_ic2_options()
        self._set_gpio_pins()

    def close(self):
        if self._bb_handle is not None:
            blackbox.BlackBox_Close(self._bb_handle)
            self._bb_handle = None
            self.log_subject.close()

    def read_byte(self, page, offset):
        #logger.debug("read register: page=%x, offset=%s", page, offset)
        return blackbox.I2C_ReadByte(self._bb_handle, page, offset)

    def write_byte(self, page, offset, data):
        #logger.debug("write register: page=0x%02X, offset=0x%02X, data=0x%02X", page, offset, data)
        blackbox.I2C_WriteByte(self._bb_handle, page, offset, data)

    def read_block(self, page, offset, length):
        data = (blackbox.BYTE * length)()
        blackbox.I2C_ReadBlock(self._bb_handle, page, offset, data, length)
        return [b for b in bytearray(data)]

    def __str__(self):
        return "<%s(comport:%s, devport:%s)>" % (self.__class__.__name__, self._comport, self._devport)

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)-15s [%(levelname)-8s] - %(message)s'
    )