#!/usr/bin/python
# -*- coding: utf-8 -*-

import logging
logger = logging.getLogger(__name__)

from ctypes import *

from simg.devadapter import BaseDeviceAdapter, DeviceEndType
from simg.devadapter.logsubject import SerialLogSubject
from blackbox import *


class WolverineDeviceAdapter(BaseDeviceAdapter):
    def __init__(self, blackbox_number, blackbox_comport, **kwargs):
        super(WolverineDeviceAdapter, self).__init__(**kwargs)
        self._bb_index = int(blackbox_number)
        self._bb_handle = BB_HANDLE()
        self.log_subject = SerialLogSubject(blackbox_comport, 19200)

    @property
    def end_type(self):
        return DeviceEndType.SOURCE

    def _set_ic2_options(self):
        i2c_options = I2C_OPTIONS()
        i2c_options.readTimeout = 100
        i2c_options.writeTimeout = 100
        i2c_options.repeatedStart = 1
        i2c_options.isBigEndian = 1
        i2c_options.noIncAddr = 1
        i2c_options.i2cBusMode = I2C_MODE_STD
        i2c_options.i2cTimeout = 127
        i2c_options.busGrantEnabled = 1
        I2C_SetOptions(self._bb_handle, i2c_options)

    def _set_gpio_pins(self):
        gpio_options = GPIO_OPTIONS()
        gpio_options.readTimeout = 100
        gpio_options.writeTimeout = 100
        gpio_options.gpioCfg0 = GPIO_PUSH_PULL
        gpio_options.gpioCfg1 = GPIO_PUSH_PULL
        gpio_options.gpioCfg2 = GPIO_PUSH_PULL
        gpio_options.gpioCfg3 = GPIO_INPUT
        gpio_options.gpioCfg4 = GPIO_PUSH_PULL
        gpio_options.gpioCfg5 = GPIO_INPUT
        gpio_options.gpioCfg6 = GPIO_INPUT
        gpio_options.gpioCfg7 = GPIO_INPUT
        gpio_options.gpioRequest = 4
        gpio_options.gpioGrant = 3
        gpio_options.gpioRequestActiveLow = 1
        gpio_options.gpioGrantActiveLow = 1
        GPIO_SetPins(self._bb_handle, gpio_options)

    def open(self):
        self.log_subject.open()
        BlackBox_Open(self._bb_index, byref(self._bb_handle))
        self._set_ic2_options()
        self._set_gpio_pins()

    def close(self):
        if self._bb_handle is not None:
            BlackBox_Close(self._bb_handle)
            self._bb_handle = None
            self.log_subject.close()

    def read_register(self, page, offset):
        return I2C_ReadByte(self._bb_handle, page, offset)

    def write_register(self, page, offset, data):
        I2C_WriteByte(self._bb_handle, page, offset, data)

    def _msc_msg(self, type, code):
        self.write_register(0xC8, 0xB9, 0x68)
        self.write_register(0xC8, 0xBA, type)
        self.write_register(0xC8, 0xBB, code)
        self.write_register(0xC8, 0XB8, 0x02)

    def rcp(self, code):
        self._msc_msg(0x10, code)

    def rap(self, code):
        self._msc_msg(0x20, code)

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)-15s [%(levelname)-8s] - %(message)s'
    )