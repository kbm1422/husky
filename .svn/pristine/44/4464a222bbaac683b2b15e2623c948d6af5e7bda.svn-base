import logging
logger = logging.getLogger(__name__)

import os
import time
import random

from simg import fs
from simg.test.framework import TestCase, TestContextManager, parametrize
from simg.devadapter import BaseDeviceAdapter


class BasePowerCycleTestCase(TestCase):
    def _test_device_av(self, device, keyword, timeout):
        with device.log_subject.listen(keyword) as listener:
            event = listener.get(timeout=timeout)
            self.assertIsNotNone(event, msg="should get log keyword '%s' in %ss" % (keyword, timeout))
        time.sleep(2)

        capture_image_dir = os.path.join(self.logdir, "images")
        fs.mkpath(capture_image_dir)
        capture_image_name = os.path.join(capture_image_dir, self.name + str(time.time()) + ".jpg")
        webcam = TestContextManager.current_context().resource.webcam
        time.sleep(10)
        webcam.capture_image(capture_image_name)

@parametrize("listen_keyword")
@parametrize("listen_timeout", type=float, default=20)
@parametrize("device", type=BaseDeviceAdapter, fetch=parametrize.FetchType.LAZY)
class PowerCycleTestCase(BasePowerCycleTestCase):
    def setUp(self):
        resource = TestContextManager.current_context().resource
        self.avproducer = resource.avproducer
        self.avconsumer = resource.avconsumer

    def test_powercycle_device(self):
        self.device.psoutlet.turnoff()
        time.sleep(5)
        self.device.psoutlet.turnon()
        self._test_device_av(self.device, self.listen_keyword, self.listen_timeout)

    def test_powercycle_tv(self):
        self.avconsumer.psoutlet.turnoff()
        time.sleep(5)
        self.avconsumer.psoutlet.turnon()
        self._test_device_av(self.device, self.listen_keyword, self.listen_timeout)

    def test_powercycle_bdp(self):
        self.avproducer.psoutlet.turnoff()
        time.sleep(5)
        self.avproducer.psoutlet.turnon()
        self._test_device_av(self.device, self.listen_keyword, self.listen_timeout)

    def test_powercycle_random(self):
        choice = random.randint(1, 3)
        if choice == 1:
            self.test_powercycle_device()
        if choice == 2:
            self.test_powercycle_tv()
        if choice == 3:
            self.test_powercycle_bdp()


@parametrize("listen_keyword")
@parametrize("listen_timeout", type=float, default=20)
@parametrize("device", type=BaseDeviceAdapter, fetch=parametrize.FetchType.LAZY)
class PowerOnTestCase(BasePowerCycleTestCase):
    def setUp(self):
        resource = TestContextManager.current_context().resource
        self.avproducer = resource.avproducer
        self.avconsumer = resource.avconsumer
        self.avproducer.psoutlet.turnoff()
        time.sleep(5)
        self.avconsumer.psoutlet.turnoff()
        time.sleep(5)
        self.device.psoutlet.turnoff()
        time.sleep(5)

    def test_poweron_device_tv_first(self):
        self.device.psoutlet.turnon()
        time.sleep(5)
        self.avconsumer.psoutlet.turnon()
        time.sleep(5)
        self.avproducer.psoutlet.turnon()
        self._test_device_av(self.device, self.listen_keyword, self.listen_timeout)

    def test_poweron_device_bdp_first(self):
        self.device.psoutlet.turnon()
        time.sleep(5)
        self.avproducer.psoutlet.turnon()
        time.sleep(5)
        self.avconsumer.psoutlet.turnon()
        self._test_device_av(self.device, self.listen_keyword, self.listen_timeout)

    def test_poweron_bdp_device_first(self):
        self.avproducer.psoutlet.turnon()
        time.sleep(5)
        self.device.psoutlet.turnon()
        time.sleep(5)
        self.avconsumer.psoutlet.turnon()
        self._test_device_av(self.device, self.listen_keyword, self.listen_timeout)

    def test_poweron_bdp_tv_first(self):
        self.avproducer.psoutlet.turnon()
        time.sleep(5)
        self.avconsumer.psoutlet.turnon()
        time.sleep(5)
        self.device.psoutlet.turnon()
        self._test_device_av(self.device, self.listen_keyword, self.listen_timeout)

    def test_poweron_tv_device_first(self):
        self.avconsumer.psoutlet.turnon()
        time.sleep(5)
        self.device.psoutlet.turnon()
        time.sleep(5)
        self.avproducer.psoutlet.turnon()
        self._test_device_av(self.device, self.listen_keyword, self.listen_timeout)

    def test_poweron_tv_bdp_first(self):
        self.avconsumer.psoutlet.turnon()
        time.sleep(5)
        self.avproducer.psoutlet.turnon()
        time.sleep(5)
        self.device.psoutlet.turnon()
        self._test_device_av(self.device, self.listen_keyword, self.listen_timeout)